# Generated by Django 4.2 on 2024-08-06 08:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ContactInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(blank=True, help_text='Email address of the contact.', max_length=254, null=True, unique=True, verbose_name='Email')),
                ('picture', models.ImageField(blank=True, help_text='Profile picture of the contact.', null=True, upload_to='contact_pictures/', verbose_name='Profile Picture')),
                ('address', models.TextField(blank=True, help_text='Address of the contact.', null=True, verbose_name='Address')),
            ],
            options={
                'verbose_name': 'Contact Info',
                'verbose_name_plural': 'Contact Infos',
            },
        ),
        migrations.CreateModel(
            name='ContactNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(help_text='Phone number of the contact.', max_length=15, verbose_name='Phone')),
            ],
            options={
                'verbose_name': 'Phone Number',
                'verbose_name_plural': 'Phone Numbers',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('name', models.CharField(help_text='The name of the entity.', max_length=100, verbose_name='Name')),
                ('additional_info', models.JSONField(blank=True, help_text='Additional information about the entity.', null=True, verbose_name='Additional Info')),
                ('date_joined', models.DateField(blank=True, help_text='The date the entity joined.', null=True, verbose_name='Date Joined')),
                ('contact_info', models.OneToOneField(help_text='Contact information for the entity.', on_delete=django.db.models.deletion.CASCADE, to='accounts.contactinfo', verbose_name='Contact Info')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
            },
        ),
        migrations.CreateModel(
            name='EntityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The type of the entity (e.g., Person, Company).', max_length=50, unique=True, verbose_name='Entity Type')),
            ],
            options={
                'verbose_name': 'Entity Type',
                'verbose_name_plural': 'Entity Types',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for the role.', max_length=50, unique=True, verbose_name='Role Code')),
                ('name', models.CharField(help_text='Unique name for the role.', max_length=50, unique=True, verbose_name='Role Name')),
                ('description', models.TextField(blank=True, help_text='Optional description for the role.', null=True, verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='RoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assigned_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when the role was assigned.', verbose_name='Assigned At')),
                ('entity', models.ForeignKey(help_text='The entity to which the role is assigned.', on_delete=django.db.models.deletion.CASCADE, to='accounts.entity', verbose_name='Entity')),
                ('role', models.ForeignKey(help_text='The role assigned to the entity.', on_delete=django.db.models.deletion.CASCADE, to='accounts.role', verbose_name='Role')),
            ],
        ),
        migrations.CreateModel(
            name='EntityUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(help_text='ID of the related object.', verbose_name='Object ID')),
                ('action', models.CharField(help_text='Description of the action performed.', max_length=255, verbose_name='Action')),
                ('timestamp', models.DateTimeField(help_text='The time when the action was performed.', verbose_name='Timestamp')),
                ('context', models.CharField(blank=True, help_text='Additional context for the action.', max_length=255, null=True, verbose_name='Context')),
                ('content_type', models.ForeignKey(help_text='The type of the content object.', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('entity', models.ForeignKey(blank=True, help_text='The entity related to the action.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.entity', verbose_name='Entity')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed the action.', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Entity Usage Log',
                'verbose_name_plural': 'Entity Usage Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='entity',
            name='entity_type',
            field=models.ForeignKey(help_text='The type of the entity.', on_delete=django.db.models.deletion.CASCADE, to='accounts.entitytype', verbose_name='Entity Type'),
        ),
        migrations.AddField(
            model_name='entity',
            name='related_entities',
            field=models.ManyToManyField(blank=True, help_text='Entities related to this entity.', to='accounts.entity', verbose_name='Related Entities'),
        ),
        migrations.AddField(
            model_name='entity',
            name='roles',
            field=models.ManyToManyField(help_text='Roles assigned to the entity.', through='accounts.RoleAssignment', to='accounts.role', verbose_name='Roles'),
        ),
        migrations.AddField(
            model_name='contactinfo',
            name='phone_numbers',
            field=models.ManyToManyField(blank=True, help_text='Phone numbers associated with the contact.', related_name='contact_infos', to='accounts.contactnumber', verbose_name='Phone Numbers'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='entity',
            field=models.ForeignKey(blank=True, help_text='The entity associated with this user.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.entity', verbose_name='Entity'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
